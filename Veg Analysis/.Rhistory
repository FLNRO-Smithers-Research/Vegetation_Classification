str(diffSum)
str(temp)
View(temp)
diffSum <- merge(diffSum, temp[,c(5)], by = "Group", all.x = TRUE)
diffSum <- merge(diffSum, temp[,c(5)], by = "Group", all.x = FALSE)
diffSum <- merge(diffSum, temp[,c(5)], by = "Group")
diffSum <- merge(diffSum, temp[,c(5)], by.x = "Group")
temp[,c(5)]
diffSum
##generate summary of # species and potential diagnostic values
diffSum <-summaryBy(PotDiff ~ Group, data = differential, FUN = c(length, sum))
diffSum
View(diffSum)
View(diffSum)
colnames(Cov1)[1:3] <- c("Group","NumSpp","DiffSum")
colnames(diffSum)[1:3] <- c("Group","NumSpp","DiffSum")
diffSum <- merge(diffSum, temp[,c(5)], by.x = "Group", all = FALSE)
diffSum <- merge(diffSum, temp[,c(5)], by = "Group", all = FALSE)
diffSum <- merge(diffSum, temp[,c(5)], by.x = "Group", all = FALSE)
diffSum <- merge(diffSum, temp, by.x = "Group", all = FALSE)
View(diffSum)
diffSum <- merge(diffSum, temp[,c(1,5)], by.x = "Group", all = FALSE)
View(diffSum)
##generate summary of # species and potential diagnostic values
diffSum <-summaryBy(PotDiff ~ Group, data = differential, FUN = c(length, sum))
colnames(diffSum)[1:3] <- c("Group","NumSpp","DiffSum")
diffSum <- merge(diffSum, temp[,c(1,5)], by.x = "Group", all = FALSE)
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
View(subPlots)
##generate summary of # species and potential diagnostic values
diffSum <-summaryBy(PotDiff ~ Group, data = differential, FUN = c(length, sum))
colnames(diffSum)[1:3] <- c("Group","NumSpp","DiffSum")
View(diffSum)
View(differential)
View(differential)
View(differential)
##generate summary of # species and potential diagnostic values
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
View(diffSum)
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
View(diffSum)
diffSum <- diffSum[,c(1, 3:5)]
colnames(diffSum)[1:4] <- c("Group","NumSpp","DiffSum", "NumPlots")
View(diffSum)
write.csv(diffSum, file= "GrasslandHierarchyUnitDifferentialpotential.csv")
#install.packages("tidyr")
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
###Read in data
vegAll <- read.table("BECMaster15VegData.txt", header = TRUE) ### three column data
vegAll <- separate(vegAll, Species, c("Species","Type"), "-", remove = TRUE)
typeCodes <- unique(vegAll[,c(2,3)])
####Read hierachy table
hierClass <- read.csv("GrasslandHierReduced.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
View(hierClass)
#Create lowest working hierarchical units
hierClass$SubAssociation <- ifelse(hierClass$SubAssociation == "",hierClass$Association,hierClass$SubAssociation) ##if SubAssoc blank, fill with Association
##selectUnits <- select.list(choices = unique(hierClass$SubAssoc), graphics = TRUE, multiple = TRUE) ##if you only want to compare certain units
selectUnits <- unique(hierClass$SubAssociation[hierClass$SubAssociation != ""]) ###All non-blank sub associations
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
View(subPlots)
##Merge plot data and hierachy
subPlots <- merge(subPlots, vegAll[,c(1:4)], by = "PlotNumber", all.x = TRUE)
vegData <- subPlots
vegData <- vegData[!is.na(vegData$Cover),]
vegData <- vegData[vegData$Cover != 0,]
vegData <- vegData[!is.na(vegData$SubAssoc),] ##remove plots not assigned to any SubAssoc
View(vegData)
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
View(temp)
save(temp, file = "PairwiseSubAssocALL.RData")
load("PairwiseSubAssocALL.RData")
###evaluate units
temp2 <- temp[,c(1,5)]
VegUnits <- unique(temp2)# number of plots per unit
numspp <- ddply(temp,~Group,summarise,sppcount=length(unique(Species))) # number of species per unit
numspp2<-ddply(temp[temp$Constancy > 20,],~Group,summarise,sppcount=length(unique(Species))) # number of non-accidental species per unit
constspp <-ddply(temp[temp$Constancy > 59,],~Group,summarise,sppcount=length(unique(Species))) # number of constant species per unit
View(constspp)
# potential diagnostic values
##### create potential differential valueslist
#CovConst <- melt(temp)
selectUnits <- as.data.frame(unique(temp[,1]))
len <- length(unique(temp[,1]))
differential <- foreach(rowNum = 1:len, .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- as.factor (selectUnits[rowNum,])
CovTemp <- temp[temp$Group %in% select,]
Cov1 <- CovTemp
Cov1[is.na(Cov1)] <- 0
# Cov1 <- Cov1[Cov1[,4] >= 60 & !is.na(Cov1[,4]),] ## remove non constant species
#Potential differntial value by constancy
Cov1$PotDiff <- ifelse(Cov1$Constancy >= 80,3,
ifelse(Cov1$Constancy >= 60,2,0))
#add differential value by cover
Cov1$PotDiff <- ifelse(Cov1[,3] <= 1,(Cov1$PotDiff),
ifelse(Cov1[,3] <= 10,(Cov1$PotDiff + 1),(Cov1$PotDiff + 8)))
#reduce differential value for non-vascular spp by 1/2
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Type <- as.integer(Cov1$Type)
Cov1$PotDiff <- ifelse((Cov1$Type >8 & Cov1$Type <12) ,(Cov1$PotDiff*0.5),(Cov1$PotDiff))
#adjust differential value by constancy
Cov1$PotDiff <- (Cov1$Constancy * Cov1$PotDiff)/100
Cov1
}
View(differential)
View(differential)
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
###Differential potential summary
diffSum <-summaryBy(PotDiff ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
View(differential)
View(VegUnits)
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
str(differential)
###Differential potential summary
droplevels(differential)
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
###Differential potential summary
differential$Group <- as.character(differential$Group)
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
differential[is.na(differential)] <- 0
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
View(diffSum)
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
diffSum <- diffSum[,c(1, 3:5)]
colnames(diffSum)[1:4] <- c("Group","NumSpp","DiffSum", "NumPlots")
write.csv(diffSum, file= "GrasslandHierarchyUnitDifferentialpotential.csv")
.libPaths("E:/R packages")
library(reshape2)
library(dplyr)
library(tidyr)
library(ggplot2)
library(magrittr)
library(foreach)
library(tcltk)
require(openxlsx)
require(doParallel)
require(doBy)
#install.packages("tidyr")
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
set.seed(123321)
coreNum <- as.numeric(detectCores()-1)
coreNo <- makeCluster(coreNum)
registerDoParallel(coreNo, cores = coreNum)
clusterEvalQ(coreNo, .libPaths("E:/R packages"))
###Read in data
vegAll <- read.table("BECMaster15VegData.txt", header = TRUE) ### three column data
vegAll <- separate(vegAll, Species, c("Species","Type"), "-", remove = TRUE)
typeCodes <- unique(vegAll[,c(2,3)])
####Read hierachy table
hierClass <- read.csv("CoastHier.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
###Read in data
load("VegDat_Raw.RData")
typeCodes <- unique(vegAll[,c(2,3)])
#install.packages("tidyr")
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
set.seed(123321)
coreNum <- as.numeric(detectCores()-1)
coreNo <- makeCluster(coreNum)
registerDoParallel(coreNo, cores = coreNum)
clusterEvalQ(coreNo, .libPaths("E:/R packages"))
###Read in data
load("VegDat_Raw.RData")
vegAll <- VegData
View(vegData)
typeCodes <- unique(vegAll[,c(2,3)])
vegAll <- VegData
vegAll <- vegData
typeCodes <- unique(vegAll[,c(2,3)])
View(typeCodes)
####Read hierachy table
hierClass <- read.csv("CoastHier.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
#Create lowest working hierarchical units
hierClass$SubAssociation <- ifelse(hierClass$SubAssociation == "",hierClass$Association,hierClass$SubAssociation) ##if SubAssoc blank, fill with Association
##selectUnits <- select.list(choices = unique(hierClass$SubAssoc), graphics = TRUE, multiple = TRUE) ##if you only want to compare certain units
selectUnits <- unique(hierClass$SubAssociation[hierClass$SubAssociation != ""]) ###All non-blank sub associations
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
##Merge plot data and hierachy
subPlots <- merge(subPlots, vegAll[,c(1:4)], by = "PlotNumber", all.x = TRUE)
vegData <- subPlots
vegData <- vegData[!is.na(vegData$Cover),]
vegData <- vegData[vegData$Cover != 0,]
vegData <- vegData[!is.na(vegData$SubAssoc),] ##remove plots not assigned to any SubAssoc
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
###evaluate units
temp2 <- temp[,c(1,5)]
VegUnits <- unique(temp2)# number of plots per unit
numspp <- ddply(temp,~Group,summarise,sppcount=length(unique(Species))) # number of species per unit
numspp2<-ddply(temp[temp$Constancy > 20,],~Group,summarise,sppcount=length(unique(Species))) # number of non-accidental species per unit
constspp <-ddply(temp[temp$Constancy > 59,],~Group,summarise,sppcount=length(unique(Species))) # number of constant species per unit
# potential diagnostic values
##### create potential differential valueslist
#CovConst <- melt(temp)
selectUnits <- as.data.frame(unique(temp[,1]))
len <- length(unique(temp[,1]))
differential <- foreach(rowNum = 1:len, .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- as.factor (selectUnits[rowNum,])
CovTemp <- temp[temp$Group %in% select,]
Cov1 <- CovTemp
Cov1[is.na(Cov1)] <- 0
# Cov1 <- Cov1[Cov1[,4] >= 60 & !is.na(Cov1[,4]),] ## remove non constant species
#Potential differntial value by constancy
Cov1$PotDiff <- ifelse(Cov1$Constancy >= 80,3,
ifelse(Cov1$Constancy >= 60,2,0))
#add differential value by cover
Cov1$PotDiff <- ifelse(Cov1[,3] <= 1,(Cov1$PotDiff),
ifelse(Cov1[,3] <= 10,(Cov1$PotDiff + 1),(Cov1$PotDiff + 8)))
#reduce differential value for non-vascular spp by 1/2
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Type <- as.integer(Cov1$Type)
Cov1$PotDiff <- ifelse((Cov1$Type >8 & Cov1$Type <12) ,(Cov1$PotDiff*0.5),(Cov1$PotDiff))
#adjust differential value by constancy
Cov1$PotDiff <- (Cov1$Constancy * Cov1$PotDiff)/100
Cov1
}
differential[is.na(differential)] <- 0 ##without this trap some units end with N/A sum in summaryBy function
###OPTION remove units with fewer than X plots
differential <- differential[differential$NoPlots > 9,-5] ###Remove groups with < 10 plots##generate summary of # species and potential diagnostic values
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
View(differential)
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
save(temp, file = "PairwiseSubAssocALL.RData")
load("PairwiseSubAssocALL.RData")
View(temp)
#install.packages("tidyr")
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
set.seed(123321)
coreNum <- as.numeric(detectCores()-1)
coreNo <- makeCluster(coreNum)
registerDoParallel(coreNo, cores = coreNum)
clusterEvalQ(coreNo, .libPaths("E:/R packages"))
###Read in data
load("VegDat_Raw.RData")### created in VegClass script
vegAll <- vegData
typeCodes <- unique(vegAll[,c(2,3)])
View(vegAll)
####Read hierachy table
hierClass <- read.csv("CoastHier.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
View(hierClass)
#Create lowest working hierarchical units
hierClass$SubAssociation <- ifelse(hierClass$SubAssociation == "",hierClass$Association,hierClass$SubAssociation) ##if SubAssoc blank, fill with Association
##selectUnits <- select.list(choices = unique(hierClass$SubAssoc), graphics = TRUE, multiple = TRUE) ##if you only want to compare certain units
selectUnits <- unique(hierClass$SubAssociation[hierClass$SubAssociation != ""]) ###All non-blank sub associations
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
View(subPlots)
##Merge plot data and hierachy
subPlots <- merge(subPlots, vegAll[,c(1:4)], by = "PlotNumber", all.x = TRUE)
vegData <- subPlots
View(vegData)
vegData <- vegData[!is.na(vegData$Cover),]
vegData <- vegData[vegData$Cover != 0,]
View(vegData)
vegData <- vegData[!is.na(vegData$SubAssoc),] ##remove plots not assigned to any SubAssoc
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
View(temp)
save(temp, file = "PairwiseSubAssocALL.RData")
load("PairwiseSubAssocALL.RData")
View(temp)
###evaluate units
temp2 <- temp[,c(1,5)]
VegUnits <- unique(temp2)# number of plots per unit
View(VegUnits)
numspp <- ddply(temp,~Group,summarise,sppcount=length(unique(Species))) # number of species per unit
numspp2<-ddply(temp[temp$Constancy > 20,],~Group,summarise,sppcount=length(unique(Species))) # number of non-accidental species per unit
constspp <-ddply(temp[temp$Constancy > 59,],~Group,summarise,sppcount=length(unique(Species))) # number of constant species per unit
View(numspp)
# potential diagnostic values
##### create potential differential valueslist
#CovConst <- melt(temp)
selectUnits <- as.data.frame(unique(temp[,1]))
len <- length(unique(temp[,1]))
differential <- foreach(rowNum = 1:len, .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- as.factor (selectUnits[rowNum,])
CovTemp <- temp[temp$Group %in% select,]
Cov1 <- CovTemp
Cov1[is.na(Cov1)] <- 0
# Cov1 <- Cov1[Cov1[,4] >= 60 & !is.na(Cov1[,4]),] ## remove non constant species
#Potential differntial value by constancy
Cov1$PotDiff <- ifelse(Cov1$Constancy >= 80,3,
ifelse(Cov1$Constancy >= 60,2,0))
#add differential value by cover
Cov1$PotDiff <- ifelse(Cov1[,3] <= 1,(Cov1$PotDiff),
ifelse(Cov1[,3] <= 10,(Cov1$PotDiff + 1),(Cov1$PotDiff + 8)))
#reduce differential value for non-vascular spp by 1/2
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Type <- as.integer(Cov1$Type)
Cov1$PotDiff <- ifelse((Cov1$Type >8 & Cov1$Type <12) ,(Cov1$PotDiff*0.5),(Cov1$PotDiff))
#adjust differential value by constancy
Cov1$PotDiff <- (Cov1$Constancy * Cov1$PotDiff)/100
Cov1
}
View(differential)
differential[is.na(differential)] <- 0 ##without this trap some units end with N/A sum in summaryBy function
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
diffSum <- diffSum[,c(1, 3:5)]
colnames(diffSum)[1:4] <- c("Group","NumSpp","DiffSum", "NumPlots")
write.csv(diffSum, file= "RainForestHierarchyUnitDifferentialpotential.csv")
###Read in data
load("VegDat_Raw.RData")### created in VegClass script
vegAll <- vegData
typeCodes <- unique(vegAll[,c(2,3)])
####Read hierachy table
hierClass <- read.csv("CoastHier.csv", stringsAsFactors = FALSE)
####Read hierachy table
hierClass <- read.csv("BorealHier.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
#Create lowest working hierarchical units
hierClass$SubAssociation <- ifelse(hierClass$SubAssociation == "",hierClass$Association,hierClass$SubAssociation) ##if SubAssoc blank, fill with Association
##selectUnits <- select.list(choices = unique(hierClass$SubAssoc), graphics = TRUE, multiple = TRUE) ##if you only want to compare certain units
selectUnits <- unique(hierClass$SubAssociation[hierClass$SubAssociation != ""]) ###All non-blank sub associations
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
##Merge plot data and hierachy
subPlots <- merge(subPlots, vegAll[,c(1:4)], by = "PlotNumber", all.x = TRUE)
vegData <- subPlots
vegData <- vegData[!is.na(vegData$Cover),]
vegData <- vegData[vegData$Cover != 0,]
vegData <- vegData[!is.na(vegData$SubAssoc),] ##remove plots not assigned to any SubAssoc
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
save(temp, file = "PairwiseSubAssocALL.RData")
load("PairwiseSubAssocALL.RData")
###evaluate units
temp2 <- temp[,c(1,5)]
VegUnits <- unique(temp2)# number of plots per unit
numspp <- ddply(temp,~Group,summarise,sppcount=length(unique(Species))) # number of species per unit
numspp2<-ddply(temp[temp$Constancy > 20,],~Group,summarise,sppcount=length(unique(Species))) # number of non-accidental species per unit
constspp <-ddply(temp[temp$Constancy > 59,],~Group,summarise,sppcount=length(unique(Species))) # number of constant species per unit
# potential diagnostic values
##### create potential differential valueslist
#CovConst <- melt(temp)
selectUnits <- as.data.frame(unique(temp[,1]))
len <- length(unique(temp[,1]))
differential <- foreach(rowNum = 1:len, .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- as.factor (selectUnits[rowNum,])
CovTemp <- temp[temp$Group %in% select,]
Cov1 <- CovTemp
Cov1[is.na(Cov1)] <- 0
# Cov1 <- Cov1[Cov1[,4] >= 60 & !is.na(Cov1[,4]),] ## remove non constant species
#Potential differntial value by constancy
Cov1$PotDiff <- ifelse(Cov1$Constancy >= 80,3,
ifelse(Cov1$Constancy >= 60,2,0))
#add differential value by cover
Cov1$PotDiff <- ifelse(Cov1[,3] <= 1,(Cov1$PotDiff),
ifelse(Cov1[,3] <= 10,(Cov1$PotDiff + 1),(Cov1$PotDiff + 8)))
#reduce differential value for non-vascular spp by 1/2
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Type <- as.integer(Cov1$Type)
Cov1$PotDiff <- ifelse((Cov1$Type >8 & Cov1$Type <12) ,(Cov1$PotDiff*0.5),(Cov1$PotDiff))
#adjust differential value by constancy
Cov1$PotDiff <- (Cov1$Constancy * Cov1$PotDiff)/100
Cov1
}
differential[is.na(differential)] <- 0 ##without this trap some units end with N/A sum in summaryBy function
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
diffSum <- diffSum[,c(1, 3:5)]
colnames(diffSum)[1:4] <- c("Group","NumSpp","DiffSum", "NumPlots")
write.csv(diffSum, file= "BorealHierarchyUnitDifferentialpotential.csv")
###Read in data
load("VegDat_Raw.RData")### created in VegClass script
vegAll <- vegData
typeCodes <- unique(vegAll[,c(2,3)])
####Read hierachy table
hierClass <- read.csv("BorealHier.csv", stringsAsFactors = FALSE)
####Read hierachy table
hierClass <- read.csv("FdPyHier.csv", stringsAsFactors = FALSE)
colnames(hierClass)[1:12]=c("PlotNumber", "Region", "Class", "Order", "SubOrder", "Alliance", "SubAlliance", "Association", "SubAssociation", "Facies", "Working", "SiteSeries")
#Create lowest working hierarchical units
hierClass$SubAssociation <- ifelse(hierClass$SubAssociation == "",hierClass$Association,hierClass$SubAssociation) ##if SubAssoc blank, fill with Association
##selectUnits <- select.list(choices = unique(hierClass$SubAssoc), graphics = TRUE, multiple = TRUE) ##if you only want to compare certain units
selectUnits <- unique(hierClass$SubAssociation[hierClass$SubAssociation != ""]) ###All non-blank sub associations
subPlots <- hierClass[hierClass$SubAssociation %in% selectUnits, c("PlotNumber","SubAssociation")] ## plot by root hierarchy unit
##Merge plot data and hierachy
subPlots <- merge(subPlots, vegAll[,c(1:4)], by = "PlotNumber", all.x = TRUE)
vegData <- subPlots
vegData <- vegData[!is.na(vegData$Cover),]
vegData <- vegData[vegData$Cover != 0,]
vegData <- vegData[!is.na(vegData$SubAssoc),] ##remove plots not assigned to any SubAssoc
###Roll up into groups with mean cover and % constancy
temp <- foreach(SS = selectUnits, .combine = rbind, .packages = "foreach") %dopar% {
sub <- vegData[vegData$SubAssoc == SS,]
num <- length(unique(sub$PlotNumber))
foreach(Spp = unique(sub$Species), .combine = rbind) %do% {
sub2 <- sub[sub$Species == Spp,]
numSpp <- dim(unique(sub2[,1:2]))[1]
covsum <- sum(sub2$Cover)
mean <- covsum/num
const <- numSpp/num
out <- data.frame(Group = SS, Species = Spp, MeanCov = mean, Constancy = const*100, NoPlots = num)
}
}
save(temp, file = "PairwiseSubAssocALL.RData")
load("PairwiseSubAssocALL.RData")
###evaluate units
temp2 <- temp[,c(1,5)]
VegUnits <- unique(temp2)# number of plots per unit
numspp <- ddply(temp,~Group,summarise,sppcount=length(unique(Species))) # number of species per unit
numspp2<-ddply(temp[temp$Constancy > 20,],~Group,summarise,sppcount=length(unique(Species))) # number of non-accidental species per unit
constspp <-ddply(temp[temp$Constancy > 59,],~Group,summarise,sppcount=length(unique(Species))) # number of constant species per unit
# potential diagnostic values
##### create potential differential valueslist
#CovConst <- melt(temp)
selectUnits <- as.data.frame(unique(temp[,1]))
len <- length(unique(temp[,1]))
differential <- foreach(rowNum = 1:len, .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- as.factor (selectUnits[rowNum,])
CovTemp <- temp[temp$Group %in% select,]
Cov1 <- CovTemp
Cov1[is.na(Cov1)] <- 0
# Cov1 <- Cov1[Cov1[,4] >= 60 & !is.na(Cov1[,4]),] ## remove non constant species
#Potential differntial value by constancy
Cov1$PotDiff <- ifelse(Cov1$Constancy >= 80,3,
ifelse(Cov1$Constancy >= 60,2,0))
#add differential value by cover
Cov1$PotDiff <- ifelse(Cov1[,3] <= 1,(Cov1$PotDiff),
ifelse(Cov1[,3] <= 10,(Cov1$PotDiff + 1),(Cov1$PotDiff + 8)))
#reduce differential value for non-vascular spp by 1/2
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Type <- as.integer(Cov1$Type)
Cov1$PotDiff <- ifelse((Cov1$Type >8 & Cov1$Type <12) ,(Cov1$PotDiff*0.5),(Cov1$PotDiff))
#adjust differential value by constancy
Cov1$PotDiff <- (Cov1$Constancy * Cov1$PotDiff)/100
Cov1
}
differential[is.na(differential)] <- 0 ##without this trap some units end with N/A sum in summaryBy function
###Differential potential summary
diffSum <-summaryBy(PotDiff + NoPlots ~ Group, data = differential, FUN = c(length, sum))
diffSum[,c(5)] <- diffSum[,c(5)]/diffSum[,c(3)]
diffSum <- diffSum[,c(1, 3:5)]
colnames(diffSum)[1:4] <- c("Group","NumSpp","DiffSum", "NumPlots")
write.csv(diffSum, file= "FdPyHierarchyUnitDifferentialpotential.csv")
