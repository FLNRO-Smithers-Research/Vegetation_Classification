###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, typeCodes, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(Groups = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
save(out, file = "GrasslandSubAssocScores.RData")
##Loop to calculate pairwise diagnostics for every possible combination (returns score for each pair)
out <- foreach(j = (1:(len-1)), .combine = rbind, .packages = c("foreach","reshape2")) %:%
foreach(k = ((j+1):len), .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$Group %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ Group + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
Cov2$Const <- ifelse(Cov2$SigB >= 6,"cd",
ifelse(Cov2$SigB >= 3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, typeCodes, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(Groups = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
save(out, file = "GrasslandSubAssocScores.RData")
badAssoc <- out[out$Score < 15,]
badAssoc <- separate(badAssoc, Groups, c("G1","G2"), " \\| ", remove = TRUE)
out <- separate(out, Groups, c("G1","G2"), " \\| ", remove = TRUE)
write.csv(badAssoc, "GrasslandPairedUnitDifferentialSum_Low.csv", row.names = FALSE)
write.csv(out, "GrasslandPairedUnitDifferentialSum_ALL.csv", row.names = FALSE)
write.csv(out, "GrasslandPairedUnitDifferentialSum_ALL.csv", row.names = FALSE)
############################################################################################
load("UnitSummary.RData")
###Lookup tables
domDiffCls <- data.frame(SigDiff = c(9,8,7,6,5,4,3,2), DomDiff = c("dd1","dd1","dd1","dd1","dd1","dd2","dd3","dd4"))
scoreVals <- data.frame(Code = c("d1","d2","d3","dd1","dd2","dd3","dd4","c","cd","cm"),
Value = c(3,2,0,6,4,3,2,1,2,0))
typeCodes <- unique(differential[,c(1,7)])
differential <- differential[,c("Group", "Species", "MeanCov", "Constancy" )]
CovConst <- melt(differential)
selectUnits <- unique(as.character(CovConst$Group))
len <- length(selectUnits)
##Loop to calculate pairwise diagnostics for every possible combination (returns score for each pair)
out <- foreach(j = (1:(len-1)), .combine = rbind, .packages = c("foreach","reshape2")) %:%
foreach(k = ((j+1):len), .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$Group %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ Group + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
Cov2$Const <- ifelse(Cov2$SigB >= 6,"cd",
ifelse(Cov2$SigB >= 3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, typeCodes, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(Groups = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
save(out, file = "BorealSubAssocScores.RData")
badAssoc <- out[out$Score < 15,]
badAssoc <- separate(badAssoc, Groups, c("G1","G2"), " \\| ", remove = TRUE)
out <- separate(out, Groups, c("G1","G2"), " \\| ", remove = TRUE)
write.csv(badAssoc, "BorealPairedUnitDifferentialSum_Low.csv", row.names = FALSE)
write.csv(out, "BorealPairedUnitDifferentialSum_ALL.csv", row.names = FALSE)
selectUnits
j = 40
k = 41
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$Group %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ Group + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
sumA <- sum(Cov1$Value)
View(Cov1)
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
View(Cov1)
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
View(Cov1)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
View(Cov1)
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
View(Cov1)
View(Cov1)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DomDiff), 0, Cov1$Value )
View(Cov1)
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$Group %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ Group + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DomDiff), 0, Cov1$Value )
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
Cov2$Const <- ifelse(Cov2$SigB >= 6,"cd",
ifelse(Cov2$SigB >= 3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, typeCodes, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DomDiff), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
##Loop to calculate pairwise diagnostics for every possible combination (returns score for each pair)
out <- foreach(j = (1:(len-1)), .combine = rbind, .packages = c("foreach","reshape2")) %:%
foreach(k = ((j+1):len), .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$Group %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ Group + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, typeCodes, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DomDiff), 0, Cov1$Value )
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
Cov2$Const <- ifelse(Cov2$SigB >= 6,"cd",
ifelse(Cov2$SigB >= 3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, typeCodes, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DomDiff), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(Groups = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
save(out, file = "BorealSubAssocScores.RData")
badAssoc <- out[out$Score < 15,]
badAssoc <- separate(badAssoc, Groups, c("G1","G2"), " \\| ", remove = TRUE)
out <- separate(out, Groups, c("G1","G2"), " \\| ", remove = TRUE)
write.csv(badAssoc, "BorealPairedUnitDifferentialSum_Low.csv", row.names = FALSE)
write.csv(out, "BorealPairedUnitDifferentialSum_ALL.csv", row.names = FALSE)
write.csv(out, "BorealPairedUnitDifferentialSum_ALL.csv", row.names = FALSE)
##How many bad associations does each group have?
lenG1 <- aggregate(Score ~ G1, badAssoc, FUN = length)
lenG2 <- aggregate(Score ~ G2, badAssoc, FUN = length)
len <- merge(lenG1, lenG2, by.x = "G1", by.y = "G2", all = TRUE)
len$Total <- apply(len[,2:3],1,FUN = sum, na.rm = TRUE)
len <- len[,-(2:3)]
write.csv(len, "numBad1.csv", row.names = FALSE)
bad <- unique(badAssoc[,1:2])
View(bad)
library(igraph)
library(gcookbook) # For the data set
# Copy madmen and drop every other row
m <- madmen[1:nrow(madmen) %% 2 == 1, ]
View(m)
# Copy madmen and drop every other row
m <- madmen
zach <- graph("Zachary")
zach
Zachary
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
#####An example of a relationship diagram
rm(list=ls())
wd <- tk_choose.dir(); setwd(wd)
library(igraph)
library(gcookbook) # For the data set
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
View(nodes)
View(links)
View(nodes)
# Examine the data:
head(nodes)
head(links)
nrow(nodes); length(unique(nodes$id))
nrow(links); nrow(unique(links[,c("from", "to")]))
# Collapse multiple links of the same type between the same two nodes
# by summing their weights, using aggregate() by "from", "to", & "type":
# (we don't use "simplify()" here so as not to collapse different link types)
links <- aggregate(links[,3], links[,-3], sum)
links <- links[order(links$from, links$to),]
colnames(links)[4] <- "weight"
rownames(links) <- NULL
nodes2 <- read.csv("Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
# Examine the data:
head(nodes2)
head(links2)
