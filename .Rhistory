pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(7,9,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
save.image("E:/MacKenzie/R/confusiondata.RData")
confusion.matrix(obs,pred,threshold=0.5)
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
#create some data
obs = c(sample(c(0,1),20,replace=TRUE),NA); obs = obs[order(obs)]
pred = runif(length(obs),0,1); pred = pred[order(pred)]
#calculate the confusion matrix
confusion.matrix(obs,pred,threshold=0.5)
install.packages("data.tree")
.libPaths("E:/R packages351")
rm(list=ls())
install.packages("data.tree")
install.packages("pander")
install.packages("data.tree")
install.packages("data.tree")
install.packages("data.tree")
## STEP 1: Input working directory using setwd("x")
rm(list=ls())
.libPaths("E:/R packages351")
list.files()
data.dir = "E:/CCISS/3 Build rF Model"
dir.create("cLHS")
wd=tk_choose.dir(); setwd(wd)
library(randtoolbox)
library(clhs)
library(foreign)
library(ggplot2)
library(raster)
library(rgdal)
library(RStoolbox)
library(sp)
library(maptools)
library(spatstat)
##########Read Grid sets with ClimateBC data
fplot=(file.choose())
Columns = c("ID1", "ID2", "Latitude", "Longitude", "Elevation","MSP","MCMT","EXT","FFP", "TD","MAT","CMD", "PAS")
X1 <- fread(fplot, select = Columns, stringsAsFactors = FALSE, data.table = FALSE)#
.libPaths("E:/R packages351")
#.libPaths("F:/R/Packages")
require (RGtk2)
require(plyr)
require (rChoiceDialogs)
require (data.table)
require(doBy)
install.packages("plyr")
#.libPaths("F:/R/Packages")
require (RGtk2)
require(plyr)
.libPaths("E:/R packages351")
require(reshape)
require(reshape2)
require(vegan)
require(caret)
require(tcltk)
require(randomForest)
require(Matrix)
require(labdsv)
require(gdata)
require(MASS)
require(openxlsx)
require (C50)
require(tidyr)
require(stringr)
require(rpart)
require(tree)
require(rattle)
require(rpart.plot)
require(partykit)
require(vegclust)
require(standardize)
require(dplyr)
require(tictoc)
require(plyr)
require(Hmisc)
require(foreign)
rm(list=ls())
wd=tk_choose.dir(); setwd(wd)
#####################importing veg data########################################
############### Uses 4 column list form R export FORMAT FROM Vpro with Lifeform option selected (Plot - Species - Cover - Lifeform)
#vegData <- read.table("BECMasterVeg_Feb7_2019.txt", header = TRUE)
vegData <- read.table("Chars2014.txt", header = TRUE)
vegData <- separate(vegData, Species, c("Species","Type"), "-", remove = TRUE)
vegData <- mutate_all(vegData, funs(toupper)) ### converts lower case characters to upper
vegData$Cover <- as.numeric(vegData$Cover)
###return on significant decimal places
vegData$Cover <- round(vegData$Cover, digits = 3)
## remove species with zero cover
vegData <- vegData[vegData$Cover > 0,]
###add space back in to Poa
vegData$Species <- str_replace_all(vegData$Species, "^POA", "POA ")
##########update old codes###################
masterList <- read.csv("USysAllSpecs.csv", stringsAsFactors = FALSE)
sppList <- masterList[masterList$Codetype == "U",]
noMatch <- masterList[masterList$OldCode != masterList$Code,3:4]
temp <- merge(vegData,noMatch,by.x = "Species", by.y = "OldCode")
temp$Species <- temp$Code
temp <- temp[,-5]
vegData <- rbind(vegData,temp) ###Add section with new names
vegData <- vegData[!vegData$Species %in% noMatch$OldCode,] ##remove old codes
###remove codes not in master list
notIn <- vegData[!vegData$Species %in% masterList$Code,]
vegData <- vegData[vegData$Species %in% masterList$Code,]
vegRemove <- vegData[vegData$Cover <= 0,]
######Export Veg data to TurboVeg
##4 column data with layer is equivalent format to the DBF format of Turbo Veg - need to
####Translate species codes to numbers
######Translate releves to Numbers
vegData <- vegData[,c(1,2,4,3)]
colnames (vegData) <- c("RELEVE_NR", "SPECIES_NAME", "COVER_CODE", "LAYER")
vegData$RELEVE_NR <- gsub("[-]","",vegData$RELEVE_NR)
Spp_include <- sppList [,c("Code", "ID")]
colnames (Spp_include) [1:2] <- c("SPECIES_NAME", "SPECIES_NR")
vegData2 <- merge (vegData, Spp_include, by.x = "SPECIES_NAME")
vegData <- vegData2[,c(2,5,3,4)]
vegData$RELEVE_NR <- as.integer (vegData$RELEVE_NR)
vegData$SPECIES_NR <- as.character (vegData$SPECIES_NR)
vegData$COVER_CODE <- as.character (vegData$COVER_CODE)
vegData$LAYER <- as.character (vegData$LAYER)
write.csv (vegData, "Chars2014_veg.csv", row.names = FALSE)
vegData <- read.csv ("Chars2014_veg.csv")
write.dbf (vegData, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
xx <- read.dbf ("TVABUND.dbf")
xx <- read.dbf ("TVABUND.dbf")
View(xx)
str(xx)
str(vegData)
vegData$RELEVE_NR <- as.integer (vegData$RELEVE_NR)
vegData$SPECIES_NR <- as.character (vegData$SPECIES_NR)
vegData$COVER_CODE <- as.character (vegData$COVER_CODE)
vegData$LAYER <- as.character (vegData$LAYER)
write.csv (vegData, "Chars2014_veg.csv", row.names = FALSE)
write.dbf (vegData, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- envData[1]
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf")
envData2 <- envData[1,1]
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- envData[1]
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
View(envData2)
envData2 <- envData2[envData2 == 20802]
vegData3 <- vegData[vegData$RELEVE_NR == 20802,]
write.dbf (vegData3, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
xx <- read.dbf ("TVABUND.dbf")
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf")
yy <- read.csv ("TVHABITA.csv")
View(yy)
write.dbf (yy, "TVHABITA.dbf")
View(xx)
View(yy)
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf")
View(vegData3)
vegData3 <- vegData[vegData$RELEVE_NR == 20802,]
write.dbf (vegData3, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
xx <- read.dbf ("TVABUND.dbf")
View(xx)
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf")
xx <- read.dbf ("TVABUND.dbf")
yy <- read.csv ("TVABUND.csv")
View(yy)
write.dbf (yy, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
yy <- read.csv ("TVABUND.csv")
write.dbf (yy, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
yy <- read.csv ("TVHABITA.csv")
write.dbf (yy, "TVHABITA.dbf")
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf")
zz <-read.dbf ("TvAdmin.dbf")
str(yy)
zz <- read.csv ("TvAdmin.csv")
str(zz)
zz <-read.dbf ("TvAdmin.dbf")
View(zz)
str(zz)
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf", factor2char = TRUE, max_nchar = 254)
zz <-read.dbf ("TvAdmin.dbf")
str(zz)
######Export Veg data to TurboVeg
##4 column data with layer is equivalent format to the DBF format of Turbo Veg - need to
####Translate species codes to numbers
######Translate releves to Numbers
vegData <- vegData[,c(1,2,4,3)]
colnames (vegData) <- c("RELEVE_NR", "SPECIES_NAME", "COVER_CODE", "LAYER")
vegData$RELEVE_NR <- gsub("[-]","",vegData$RELEVE_NR)
View(sppList)
View(sppList)
Spp_include <- sppList [,c("Code", "ScientificName")]
View(vegData)
#####################importing veg data########################################
############### Uses 4 column list form R export FORMAT FROM Vpro with Lifeform option selected (Plot - Species - Cover - Lifeform)
#vegData <- read.table("BECMasterVeg_Feb7_2019.txt", header = TRUE)
vegData <- read.table("Chars2014.txt", header = TRUE)
vegData <- separate(vegData, Species, c("Species","Type"), "-", remove = TRUE)
vegData <- mutate_all(vegData, funs(toupper)) ### converts lower case characters to upper
vegData$Cover <- as.numeric(vegData$Cover)
###return on significant decimal places
vegData$Cover <- round(vegData$Cover, digits = 3)
## remove species with zero cover
vegData <- vegData[vegData$Cover > 0,]
###add space back in to Poa
vegData$Species <- str_replace_all(vegData$Species, "^POA", "POA ")
save(vegData, file = "CHARS2014_VegDat_Raw.RData")##includes type field for lifeform
######Export Veg data to TurboVeg
##4 column data with layer is equivalent format to the DBF format of Turbo Veg - need to
####Translate species codes to numbers
######Translate releves to Numbers
vegData <- vegData[,c(1,2,4,3)]
View(vegData)
colnames (vegData) <- c("RELEVE_NR", "Spp_Code", "COVER_CODE", "LAYER")
vegData$RELEVE_NR <- gsub("[-]","",vegData$RELEVE_NR)
Spp_include <- sppList [,c("Code", "ScientificName")]
vegData$RELEVE_NR <- gsub("[-]","",vegData$RELEVE_NR)
Spp_include <- sppList [,c("Code", "ScientificName")]
colnames (Spp_include) [1:2] <- c("Spp_Code", "Scientific")
vegData2 <- merge (vegData, Spp_include, by.x = "Spp_Code")
write.csv (vegData2, "Chars2014_veg.csv", row.names = FALSE)
yy <- read.csv ("TVABUND.csv")
write.dbf (yy, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
View(yy)
yy <- read.csv ("TVABUND.csv")
write.dbf (yy, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
yy <- read.csv ("TVHABITA.csv")
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
zz <- read.csv ("TvAdmin.csv")
zz <-read.dbf ("TvAdmin.dbf")
zz <- read.csv ("TvAdmin.csv")
zz <-read.dbf ("TvAdmin.dbf")
zz <- read.csv ("TvAdmin.csv")
write.dbf (zz, "TvAdmin.dbf", factor2char = TRUE, max_nchar = 254)
str(zz)
zz <- read.csv ("TvAdmin.csv", stringsAsFactors = FALSE)
write.dbf (zz, "TvAdmin.dbf", factor2char = TRUE, max_nchar = 254)
str(zz)
zz <- read.csv ("TvAdmin.csv", stringsAsFactors = FALSE)
zz <-read.dbf ("TvAdmin.dbf")
write.dbf (zz, "TvAdmin.dbf", factor2char = TRUE, max_nchar = 254)
zz <- read.csv ("TvAdmin(2).csv", stringsAsFactors = FALSE)
zz <-read.dbf ("TVADMIN (2).dbf")
str(zz)
zz <- read.csv ("TvAdmin.csv", stringsAsFactors = FALSE)
write.dbf (zz, "TvAdmin.dbf", factor2char = TRUE, max_nchar = 254)
yy <- read.csv ("TVHABITA.csv")
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
View(yy)
yy [is.na(yy)] <- ""
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
yy <- read.csv ("TVHABITA.csv")
yy [is.na(yy)] <- ""
View(yy)
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
yy [is.na(yy)] <- 0
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
yy [is.na(yy)] <- ""
View(yy)
yy [is.na(yy)] <- " "
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
yy %>%
)
yy %>%
mutate_all(funs(ifelse(is.na(.), 0, .)))
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy %>%
mutate_all(funs(ifelse(is.na(.), " ", .)))
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
yy %>%
mutate_all(funs(ifelse(is.na(.), "x", .)))
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <-read.dbf ("TVHABITA.dbf")
View(yy)
warning()
warnings()
yy2 <-read.dbf ("TVHABITA.dbf")
View(yy2)
View(yy)
yy %>%
mutate_all(funs(ifelse(is.na(.), "x", .)))
View(yy)
yy <- yy %>%
mutate_all(funs(ifelse(is.na(.), "x", .)))
View(yy)
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
View(yy2)
yy2 <-read.dbf ("TVHABITA.dbf")
xx <- read.dbf ("TVABUND.dbf")
View(xx)
View(yy)
yy2 <-read.dbf ("TVHABITA.dbf")
View(yy2)
write.dbf (xx, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
str  (xx)
xx$RELEVE_NR <- as.integer (xx$RELEVE_NR)
xx$SPECIES_NR <- as.character (xx$SPECIES_NR)
xx$COVER_CODE <- as.character (xx$COVER_CODE)
xx$LAYER <- as.character (xx$LAYER)
write.dbf (xx, "TVABUND.dbf", factor2char = TRUE, max_nchar = 254)
xx <- read.dbf ("TVABUND.dbf")
str(xx)
str(yy2)
yy$RELEVE_NR <- as.integer (yy$RELEVE_NR)
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
ww <- read.csv ("TVwin.csv")
str(ww)
ww <- read.csv ("TVwin.csv",, stringsAsFactors = FALSE )
ww <- read.csv ("TVwin.csv", stringsAsFactors = FALSE )
ww
write.dbf (ww, "TVwin.dbf", factor2char = TRUE, max_nchar = 254)
write.dbf (yy, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy <- read.csv ("TVHABITA.csv", stringsAsFactors = FALSE)
yy$RELEVE_NR <- as.integer (yy$RELEVE_NR)
yy
yy2 <-read.dbf ("TVHABITA.dbf")
yy
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
yy2
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- envData[1]
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2 == 20802]
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
yy2
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2 == 20802]
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
yy2
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2 == 20802]
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2 = 20802,]
View(envData2)
envData2 <- envData2[envData2 = 20802,]
envData2 <- envData2[envData2$RELEVE_NR = 20802,]
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2$RELEVE_NR = 20802,]
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- envData2[envData2$RELEVE_NR = 20802,]
envData2 <- envData2[envData2$RELEVE_NR == 20802,]
envData2 <- as.data.frame(envData2[envData2$RELEVE_NR == 20802,])
envData <- read.csv("CHARS2014_ENV.csv", header = TRUE)
envData2 <- as.data.frame (envData[1])
colnames (envData2) <- c("RELEVE_NR")
envData2$RELEVE_NR <- gsub("[-]","",envData2$RELEVE_NR)
envData2$RELEVE_NR <- as.integer (envData2$RELEVE_NR)
envData2 <- as.data.frame(envData2[envData2$RELEVE_NR == 20802,])
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
yy2
colnames (envData2) <- c("RELEVE_NR")
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
yy2 <-read.dbf ("TVHABITA.dbf")
yy2
str(yy2)
write.dbf (envData2, "TVHABITA.dbf", factor2char = TRUE, max_nchar = 254)
