ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 2.2,3,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10))))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
ifelse(Cov1$SigA >= 3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- ifelse(Cov1$Value>0 & is.na(Cov1$Differential), Cov1$Value -2, Cov1$Value)
Cov1$Value <- ifelse(Cov1$Value<0, 0, Cov1$Value)
Cov1$Value <- Cov1$Value*(Cov1[,4]/100)
Cov1 <- merge(Cov1, lifeform, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DomDiff), 0, Cov1$Value )
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
Cov2$Const <- ifelse(Cov2$SigB >= 6,"cd",
ifelse(Cov2$SigB >= 3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c(8,11,12)],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- ifelse(Cov2$Value>0 & is.na(Cov2$Differential), Cov2$Value -2, Cov2$Value)
Cov2$Value <- ifelse(Cov2$Value<0, 0, Cov2$Value)
Cov2$Value <- Cov2$Value*(Cov2[,6]/100)
Cov2 <- merge(Cov2, lifeform, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DomDiff), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(SiteUnits = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
badAssoc <- out[out$Score < 15,]
badAssoc <- separate(badAssoc, SiteUnits, c("G1","G2"), " \\| ", remove = TRUE)
out <- separate(out, SiteUnits, c("G1","G2"), " \\| ", remove = TRUE)
save(out, file = "AllForestSiteSeriesScores.RData")
write.csv(badAssoc, "AllForestSiteSeriesDifferentialSum_Low.csv", row.names = FALSE)
write.csv(out, "AllForestSiteSeriesDifferentialSum_ALL.csv", row.names = FALSE)
j  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
k = select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
##Loop to calculate pairwise diagnostics for every possible combination (returns score for each pair)
out <- foreach(j = (1:(len-1)), .combine = rbind, .packages = c("foreach","reshape2")) %:%
foreach(k = ((j+1):len), .combine = rbind, .packages = c("foreach","reshape2")) %dopar% {
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$SiteUnit %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ SiteUnit + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10)))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1$CovDiff <- ifelse (Cov1[,2] >10, (Cov1[,2] / Cov1[,4])/10,
ifelse(Cov1[,2] >5 , ((Cov1[,2] / (Cov1[,4]*1.5) / 10)), 0))
Cov1$CovDiff <- ifelse(Cov1$CovDiff >1, 1,
ifelse(Cov1$CovDiff <0.2, 0, Cov1$CovDiff ))
Cov1$DDpoints <- ifelse(Cov1[,2] <10, (Cov1$CovDiff * 4) *(Cov1[,2]/10),Cov1$CovDiff * 4)
Cov1$DDclass <- ifelse(Cov1$DDpoints >=4, "dd1",
ifelse(Cov1$DDpoints >=2, "dd2",
ifelse(Cov1$DDpoints >=1.2, "dd3",
ifelse(Cov1$DDpoints > 0, "dd4", NA))))
#Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
#Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
#ifelse(Cov1$SigA >= 3, "c","cm"))
Cov1$Const <- ifelse(Cov1[,2] >= 10,"cd",
ifelse(Cov1[,2] >= 0.3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- ifelse(Cov1$Value>0 & is.na(Cov1$Differential), Cov1$Value -2, Cov1$Value)
Cov1$Value <- ifelse(Cov1$Value<0, 0, Cov1$Value)
Cov1$Value <- Cov1$Value*(Cov1[,3]/100)
Cov1$Value <- Cov1$Value + Cov1$DDpoints
Cov1 <- merge(Cov1, lifeform, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DDclass), 0, Cov1$Value )
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2$CovDiff <- ifelse (Cov2[,4] >10, (Cov2[,4] / Cov2[,2])/10,
ifelse(Cov2[,4] >5 , ((Cov2[,4] / (Cov2[,2]*1.5) / 10)), 0))
Cov2$CovDiff <- ifelse(Cov2$CovDiff >1, 1,
ifelse(Cov2$CovDiff <0.2, 0, Cov2$CovDiff ))
Cov2$DDpoints <- ifelse(Cov2[,4] <10, (Cov2$CovDiff * 4) *(Cov2[,4]/10),Cov2$CovDiff * 4)
Cov2$DDclass <- ifelse(Cov2$DDpoints >=4, "dd1",
ifelse(Cov2$DDpoints >=2, "dd2",
ifelse(Cov2$DDpoints >=1.2, "dd3",
ifelse(Cov2$DDpoints > 0, "dd4", NA))))
#Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
#Cov2$Const <- ifelse(Cov2$SigA >= 6,"cd",
#ifelse(Cov2$SigA >= 3, "c","cm"))
Cov2$Const <- ifelse(Cov2[,4] >= 10,"cd",
ifelse(Cov2[,4] >= 0.3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- ifelse(Cov2$Value>0 & is.na(Cov2$Differential), Cov2$Value -2, Cov2$Value)
Cov2$Value <- ifelse(Cov2$Value<0, 0, Cov2$Value)
Cov2$Value <- Cov2$Value*(Cov2[,5]/100)
Cov2$Value <- Cov2$Value + Cov2$DDpoints
Cov2 <- merge(Cov2, lifeform, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DDclass), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
outTemp <- data.frame(SiteUnits = paste(select[1],"|",select[2]), Score = totDiff)
outTemp
}
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$SiteUnit %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ SiteUnit + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
############################################################################################
#load Summary data from 01 summary script
load("SubAssociation_Differential_data.RData")
load("SppLifeForm.RData")
SUsumData <- SUsumData[!grepl("[?]" ,SUsumData$SiteUnit),] ##removes units flagged as questionable
SUsumData <- SUsumData[!grepl("%" ,SUsumData$SiteUnit),] # removes units flagged as provisional
SUsumData <- SUsumData[!grepl("[$]" ,SUsumData$SiteUnit),] #removes units flagged as seral
#SpKeep <- SpKeep[SpKeep != "luzu+p"]
maxConst <- aggregate(Constancy ~ Species, SUsumData, FUN = max)
SpKeep <- maxConst[maxConst$Constancy >= 60,] ## identify species with >60% constancy in at least one unit
SpKeep <- as.character(SpKeep$Species)
#SpKeep <- SpKeep[SpKeep != "luzu+p"] ##this code causes issues further down - possibly the + sign
SUsumData$Species <- as.character(SUsumData$Species)
SUsumData <- SUsumData[SUsumData$Species %in% SpKeep,]
SUsumData$Species <- as.factor(SUsumData$Species)
#keep only left 4 columns of data
SUsumData<- SUsumData[,1:4]
diffspp <- as.matrix(unique(SUsumData$Species)) ##list of species possibly differential in at least one unit
#factor (SUsumData$SiteUnit)
droplevels(SUsumData$SiteUnit, SUsumData$Species)
save(SUsumData, file = paste(level,"_Differential_data.RData", sep = ""))
###Lookup tables
domDiffCls <- data.frame(SigDiff = c(9,8,7,6,5,4,3,2), DomDiff = c("dd1","dd1","dd1","dd1","dd1","dd2","dd3","dd4"))
scoreVals <- data.frame(Code = c("d1","d2","d3","dd1","dd2","dd3","dd4","cd","c","cm"),
Value = c(4,3,1,0,0,0,0,2,0,-2))
differential <- SUsumData[,c("SiteUnit", "Species", "MeanCov", "Constancy" )]
CovConst <- melt(differential)
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$SiteUnit %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ SiteUnit + variable, value.var = "value", fun.aggregate = mean)
j  <- row.names (select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE))
k = select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
j <- rownames(j)
j  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
j <- rownames(selectUnits[j,)
j <- rownames(selectUnits[j],)
j <- rownames(selectUnits[j,])
j <- rownames(selectUnits[j])
j  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
j <- rownames(selectUnits[j])
rownames (selectUnits)
which(selectUnits == j)[1]
which(selectUnits = j)[1]
selectUnits[sort.list(selectUnits)]
len <- length(selectUnits)
j  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
which(selectUnits == j)[1]
selectUnits <- unique(as.character(CovConst$SiteUnit))
selectUnits[sort.list(selectUnits)]
len <- length(selectUnits)
jname  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
j <- which(selectUnits == jname)[1]
kname = select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
k <- which(selectUnits == kname)[1]
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$SiteUnit %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ SiteUnit + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10)))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1$CovDiff <- ifelse (Cov1[,2] >10, (Cov1[,2] / Cov1[,4])/10,
ifelse(Cov1[,2] >5 , ((Cov1[,2] / (Cov1[,4]*1.5) / 10)), 0))
Cov1$CovDiff <- ifelse(Cov1$CovDiff >1, 1,
ifelse(Cov1$CovDiff <0.2, 0, Cov1$CovDiff ))
Cov1$DDpoints <- ifelse(Cov1[,2] <10, (Cov1$CovDiff * 4) *(Cov1[,2]/10),Cov1$CovDiff * 4)
Cov1$DDclass <- ifelse(Cov1$DDpoints >=4, "dd1",
ifelse(Cov1$DDpoints >=2, "dd2",
ifelse(Cov1$DDpoints >=1.2, "dd3",
ifelse(Cov1$DDpoints > 0, "dd4", NA))))
#Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
#Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
#ifelse(Cov1$SigA >= 3, "c","cm"))
Cov1$Const <- ifelse(Cov1[,2] >= 10,"cd",
ifelse(Cov1[,2] >= 0.3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- ifelse(Cov1$Value>0 & is.na(Cov1$Differential), Cov1$Value -2, Cov1$Value)
Cov1$Value <- ifelse(Cov1$Value<0, 0, Cov1$Value)
Cov1$Value <- Cov1$Value*(Cov1[,3]/100)
Cov1$Value <- Cov1$Value + Cov1$DDpoints
Cov1 <- merge(Cov1, lifeform, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DDclass), 0, Cov1$Value )
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2$CovDiff <- ifelse (Cov2[,4] >10, (Cov2[,4] / Cov2[,2])/10,
ifelse(Cov2[,4] >5 , ((Cov2[,4] / (Cov2[,2]*1.5) / 10)), 0))
Cov2$CovDiff <- ifelse(Cov2$CovDiff >1, 1,
ifelse(Cov2$CovDiff <0.2, 0, Cov2$CovDiff ))
Cov2$DDpoints <- ifelse(Cov2[,4] <10, (Cov2$CovDiff * 4) *(Cov2[,4]/10),Cov2$CovDiff * 4)
Cov2$DDclass <- ifelse(Cov2$DDpoints >=4, "dd1",
ifelse(Cov2$DDpoints >=2, "dd2",
ifelse(Cov2$DDpoints >=1.2, "dd3",
ifelse(Cov2$DDpoints > 0, "dd4", NA))))
#Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
#Cov2$Const <- ifelse(Cov2$SigA >= 6,"cd",
#ifelse(Cov2$SigA >= 3, "c","cm"))
Cov2$Const <- ifelse(Cov2[,4] >= 10,"cd",
ifelse(Cov2[,4] >= 0.3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- ifelse(Cov2$Value>0 & is.na(Cov2$Differential), Cov2$Value -2, Cov2$Value)
Cov2$Value <- ifelse(Cov2$Value<0, 0, Cov2$Value)
Cov2$Value <- Cov2$Value*(Cov2[,5]/100)
Cov2$Value <- Cov2$Value + Cov2$DDpoints
Cov2 <- merge(Cov2, lifeform, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DDclass), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
View(Cov1)
View(Cov2)
View(Cov2)
View(Cov1)
############################################################################################
#load Summary data from 01 summary script
load("SubAssociation_Differential_data.RData")
load("SppLifeForm.RData")
SUsumData <- SUsumData[!grepl("[?]" ,SUsumData$SiteUnit),] ##removes units flagged as questionable
SUsumData <- SUsumData[!grepl("%" ,SUsumData$SiteUnit),] # removes units flagged as provisional
SUsumData <- SUsumData[!grepl("[$]" ,SUsumData$SiteUnit),] #removes units flagged as seral
#SpKeep <- SpKeep[SpKeep != "luzu+p"]
maxConst <- aggregate(Constancy ~ Species, SUsumData, FUN = max)
SpKeep <- maxConst[maxConst$Constancy >= 60,] ## identify species with >60% constancy in at least one unit
SpKeep <- as.character(SpKeep$Species)
SUsumData <- SUsumData[SUsumData$Species %in% SpKeep,]
#SpKeep <- SpKeep[SpKeep != "luzu+p"] ##this code causes issues further down - possibly the + sign
SUsumData$Species <- as.character(SUsumData$Species)
SUsumData$Species <- as.factor(SUsumData$Species)
#keep only left 4 columns of data
SUsumData<- SUsumData[,1:4]
diffspp <- as.matrix(unique(SUsumData$Species)) ##list of species possibly differential in at least one unit
#factor (SUsumData$SiteUnit)
droplevels(SUsumData$SiteUnit, SUsumData$Species)
save(SUsumData, file = paste(level,"_Differential_data.RData", sep = ""))
###Lookup tables
domDiffCls <- data.frame(SigDiff = c(9,8,7,6,5,4,3,2), DomDiff = c("dd1","dd1","dd1","dd1","dd1","dd2","dd3","dd4"))
scoreVals <- data.frame(Code = c("d1","d2","d3","dd1","dd2","dd3","dd4","cd","c","cm"),
Value = c(4,3,1,0,0,0,0,2,0,-2))
differential <- SUsumData[,c("SiteUnit", "Species", "MeanCov", "Constancy" )]
CovConst <- melt(differential)
selectUnits <- unique(as.character(CovConst$SiteUnit))
selectUnits[sort.list(selectUnits)]
len <- length(selectUnits)
jname  <- select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
j <- which(selectUnits == jname)[1]
kname = select.list(choices = selectUnits[sort.list(selectUnits)], graphics = TRUE)
k <- which(selectUnits == kname)[1]
select <- selectUnits[c(j,k)]
CovTemp <- CovConst[CovConst$SiteUnit %in% select,] ##subset
CovMatrix <- dcast(CovTemp, Species ~ SiteUnit + variable, value.var = "value", fun.aggregate = mean)
CovMatrix[is.na(CovMatrix)] <- 0
# Unit j vs k
Cov1 <- CovMatrix[CovMatrix[,3] >= 60 & !is.na(CovMatrix[,3]),]###remove < 60% constancy for j unit
Cov1$ConstDiff <- abs(Cov1[,3] - Cov1[,5])
Cov1$Differential <- ifelse(Cov1$ConstDiff >= 80,"d1",
ifelse(Cov1$ConstDiff >= 60,"d2",
ifelse(Cov1$ConstDiff >= 40,"d3",NA)))
Cov1$SigA <- ifelse(Cov1[,2] <= 0.1,0,
ifelse(Cov1[,2] <= 0.3,1,
ifelse(Cov1[,2] <= 1,2,
ifelse(Cov1[,2] <= 2.2,3,
ifelse(Cov1[,2] <= 5,4,
ifelse(Cov1[,2] <= 10, 5,
ifelse(Cov1[,2] <= 20,6,
ifelse(Cov1[,2] <= 33,7,
ifelse(Cov1[,2] <= 50,8,
ifelse(Cov1[,2] <= 75,9,10))))))))))
Cov1$SigB <- ifelse(Cov1[,4] <= 0.1,0,
ifelse(Cov1[,4] <= 0.3,1,
ifelse(Cov1[,4] <= 1,2,
ifelse(Cov1[,4] <= 5,4,
ifelse(Cov1[,4] <= 10, 5,
ifelse(Cov1[,4] <= 20,6,
ifelse(Cov1[,4] <= 33,7,
ifelse(Cov1[,4] <= 50,8,
ifelse(Cov1[,4] <= 75,9,10)))))))))
Cov1$SigDiff <- Cov1$SigA - Cov1$SigB
Cov1$CovDiff <- ifelse (Cov1[,2] >10, (Cov1[,2] / Cov1[,4])/10,
ifelse(Cov1[,2] >5 , ((Cov1[,2] / (Cov1[,4]*1.5) / 10)), 0))
Cov1$CovDiff <- ifelse(Cov1$CovDiff >1, 1,
ifelse(Cov1$CovDiff <0.2, 0, Cov1$CovDiff ))
Cov1$DDpoints <- ifelse(Cov1[,2] <10, (Cov1$CovDiff * 4) *(Cov1[,2]/10),Cov1$CovDiff * 4)
Cov1$DDclass <- ifelse(Cov1$DDpoints >=4, "dd1",
ifelse(Cov1$DDpoints >=2, "dd2",
ifelse(Cov1$DDpoints >=1.2, "dd3",
ifelse(Cov1$DDpoints > 0, "dd4", NA))))
#Cov1 <- merge(Cov1, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov1$DomDiff <- ifelse(Cov1$SigDiff < 6, NA, Cov1$SigDiff)
#Cov1$Const <- ifelse(Cov1$SigA >= 6,"cd",
#ifelse(Cov1$SigA >= 3, "c","cm"))
Cov1$Const <- ifelse(Cov1[,2] >= 10,"cd",
ifelse(Cov1[,2] >= 0.3, "c","cm"))
###sum values
Cov1$Value <- apply(Cov1[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov1$Value <- ifelse(Cov1$Value>0 & is.na(Cov1$Differential), Cov1$Value -2, Cov1$Value)
Cov1$Value <- ifelse(Cov1$Value<0, 0, Cov1$Value)
Cov1$Value <- Cov1$Value*(Cov1[,3]/100)
Cov1$Value <- Cov1$Value + Cov1$DDpoints
Cov1 <- merge(Cov1, lifeform, by = "Species", all.x = TRUE)
Cov1$Value <- ifelse(is.na(Cov1$Differential ) & is.na(Cov1$DDclass), 0, Cov1$Value )
Cov1$Value <- ifelse(Cov1$Type %in% c(9,10,11,13), Cov1$Value/2, Cov1$Value)
sumA <- sum(Cov1$Value)
# Unit k vs j
Cov2 <- CovMatrix[CovMatrix[,5] >= 60 & !is.na(CovMatrix[,5]),]###remove < 60% constancy for k unit
Cov2$ConstDiff <- abs(Cov2[,5] - Cov2[,3])
Cov2$Differential <- ifelse(Cov2$ConstDiff >= 80,"d1",
ifelse(Cov2$ConstDiff >= 60,"d2",
ifelse(Cov2$ConstDiff >= 40,"d3",NA)))
Cov2$SigA <- ifelse(Cov2[,2] <= 0.1,0,
ifelse(Cov2[,2] <= 0.3,1,
ifelse(Cov2[,2] <= 1,2,
ifelse(Cov2[,2] <= 2.2,3,
ifelse(Cov2[,2] <= 5,4,
ifelse(Cov2[,2] <= 10, 5,
ifelse(Cov2[,2] <= 20,6,
ifelse(Cov2[,2] <= 33,7,
ifelse(Cov2[,2] <= 50,8,
ifelse(Cov2[,2] <= 75,9,10))))))))))
Cov2$SigB <- ifelse(Cov2[,4] <= 0.1,0,
ifelse(Cov2[,4] <= 0.3,1,
ifelse(Cov2[,4] <= 1,2,
ifelse(Cov2[,4] <= 2.2,3,
ifelse(Cov2[,4] <= 5,4,
ifelse(Cov2[,4] <= 10, 5,
ifelse(Cov2[,4] <= 20,6,
ifelse(Cov2[,4] <= 33,7,
ifelse(Cov2[,4] <= 50,8,
ifelse(Cov2[,4] <= 75,9,10))))))))))
Cov2$SigDiff <- Cov2$SigB - Cov2$SigA
Cov2$CovDiff <- ifelse (Cov2[,4] >10, (Cov2[,4] / Cov2[,2])/10,
ifelse(Cov2[,4] >5 , ((Cov2[,4] / (Cov2[,2]*1.5) / 10)), 0))
Cov2$CovDiff <- ifelse(Cov2$CovDiff >1, 1,
ifelse(Cov2$CovDiff <0.2, 0, Cov2$CovDiff ))
Cov2$DDpoints <- ifelse(Cov2[,4] <10, (Cov2$CovDiff * 4) *(Cov2[,4]/10),Cov2$CovDiff * 4)
Cov2$DDclass <- ifelse(Cov2$DDpoints >=4, "dd1",
ifelse(Cov2$DDpoints >=2, "dd2",
ifelse(Cov2$DDpoints >=1.2, "dd3",
ifelse(Cov2$DDpoints > 0, "dd4", NA))))
#Cov2 <- merge(Cov2, domDiffCls, by = "SigDiff", all.x = TRUE)
#Cov2$DomDiff <- ifelse(Cov2$SigDiff < 6, NA, Cov2$SigDiff)
#Cov2$Const <- ifelse(Cov2$SigA >= 6,"cd",
#ifelse(Cov2$SigA >= 3, "c","cm"))
Cov2$Const <- ifelse(Cov2[,4] >= 10,"cd",
ifelse(Cov2[,4] >= 0.3, "c","cm"))
###sum values
Cov2$Value <- apply(Cov2[,c("Differential","Const","DDpoints")],1,FUN = function(x){sum(scoreVals$Value[scoreVals$Code %in% x])})
Cov2$Value <- ifelse(Cov2$Value>0 & is.na(Cov2$Differential), Cov2$Value -2, Cov2$Value)
Cov2$Value <- ifelse(Cov2$Value<0, 0, Cov2$Value)
Cov2$Value <- Cov2$Value*(Cov2[,5]/100)
Cov2$Value <- Cov2$Value + Cov2$DDpoints
Cov2 <- merge(Cov2, lifeform, by = "Species", all.x = TRUE)
Cov2$Value <- ifelse(Cov2$Type %in% c(9,10,11,13), Cov2$Value/2, Cov2$Value)
Cov2$Value <- ifelse(is.na(Cov2$Differential ) & is.na(Cov2$DDclass), 0, Cov2$Value )
sumB <- sum(Cov2$Value)
totDiff <- sumA+sumB
View(Cov1)
View(Cov2)
